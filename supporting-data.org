#+TITLE: 
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: author:nil date:nil toc:nil tex:dvipng num:nil
#+LATEX_CLASS: revtex4-1
#+LATEX_CLASS_OPTIONS:[aps,citeautoscript,preprint,citeautoscript,showkeys,floatfix,superscriptaddress,longbibliography]
#+latex_header: \usepackage[utf8]{inputenc}
#+latex_header: \usepackage{url}
#+latex_header: \usepackage[version=4]{mhchem}
#+latex_header: \usepackage{chemmacros}[2016/05/02]
#+latex_header: \usepackage{graphicx}
#+latex_header: \usepackage{float}
#+latex_header: \usepackage{color}
#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage{textcomp}
#+latex_header: \usepackage{wasysym}
#+latex_header: \usepackage{latexsym}
#+latex_header: \usepackage{amssymb}
#+latex_header: \usepackage{minted}
#+latex_header: \usepackage[linktocpage, pdfstartview=FitH, colorlinks, linkcolor=black, anchorcolor=black, citecolor=black, filecolor=black, menucolor=black, urlcolor=black]{hyperref}
#+latex_header: \newcommand{\red}[1]{\textcolor{red}{#1}}
#+latex_header: \chemsetup{formula = mhchem ,modules = {reactions,thermodynamics}}
#+latex_header: \usepackage[noabbrev]{cleveref}
#+latex_header: \def\bibsection{\section*{Supplementary References}} 
#+latex_header: \renewcommand{\figurename}{Supplementary Figure}
#+latex_header:\renewcommand{\thetable}{\arabic{table}}
#+latex_header: \renewcommand{\tablename}{Supplementary Table}
#+latex_header: \Crefname{figure}{Supplementary Figure}{Supplementary Figures}
#+latex_header: \Crefname{figure}{Supplementary Figure}{Supplementary Figures}
#+latex_header: \Crefname{table}{Supplementary Table}{Supplementary Tables}

\title{Supplementary Data: Plasma-Catalytic Ammonia Synthesis Beyond the Equilibrium Limit}

\author{Prateek Mehta}
\affiliation{Department of Chemical and Biomolecular Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}

\author{Patrick Barboun}
\affiliation{Department of Chemical and Biomolecular Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}

\author{Yannick Engelmann}
\affiliation{Department of Chemistry, Antwerp University, Campus Drie Eiken, Universiteitsplein 1, 2610 Wilrijk}

\author{David B. Go}
\affiliation{Department of Chemical and Biomolecular Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}
\affiliation{Department of Aerospace and Mechanical Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}

\author{Annemie Bogaerts}
\email{annemie.bogaerts@uantwerpen.be}
\affiliation{Department of Chemistry, Antwerp University, Campus Drie Eiken, Universiteitsplein 1, 2610 Wilrijk}

\author{William F. Schneider}
\email{wschneider@nd.edu}
\affiliation{Department of Chemical and Biomolecular Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}

\author{Jason C. Hicks}
\email{jhicks3@nd.edu}
\affiliation{Department of Chemical and Biomolecular Engineering, University of Notre Dame, Notre Dame, Indiana 46556, United States}

\date{\today}
\pacs{}
\pagenumbering{gobble} 
\maketitle
\raggedbottom

* Supplementary Data

Source code and raw data is provided in an external Zenodo repository at *link.* The python class =simpleMkm= in /simplemkm.py/ contains the core functions necessary to perform the microkinetic calculations, while the class =mkmRunner= in mkmutils.py contains utility functions to run the calculations in an automated fashion on our computing cluster. The input (/*.mkminp/) and output (/*.mkmout/) files for the microkinetic model are included in the Zenodo directory. Raw experimental data is also provided as an Excel spreadsheet (*filename*). Example python scripts to perform the calculations in this work, and to create the figures in the main text are provided below. These scripts were executed within an Emacs org-mode document (/supporting-data.org/), which was then exported to create this supplementary data pdf file. 


** Using the kinetic model: Plasma-off calculations

#+BEGIN_SRC python :results output org drawer
from utils import cd
from mkmutils import mkmRunner as runner

EAs = [-1.2, -0.6, 0.0]

plasma_on = False
rxn2_barrier = True

for EA in EAs:
    mod = runner(EA,
                 plasma_on=plasma_on,
                 rxn2_barrier=rxn2_barrier,
                 npts=100,
                 concentration_based=True)
    
    with cd('mkm-calcs/{0}'.format(mod.prefix)):
	mod.write_input()
	mod.run_job()
#+END_SRC

#+RESULTS:
:results:
:end:


** Using the kinetic model: Plasma-on calculations

 #+BEGIN_SRC python :results output org drawer
from utils import cd
from mkmutils import mkmRunner as runner

EAs = [-1.2, -0.6, 0.0]

kei = range(-15, -12, 1)
ks_eimpact=[float('1.0e{0}'.format(i)) for i in kei]  # cm3 / s

# Excitation energy, eV
Evib_A2 = 1.0

for EA in EAs:
    for k_eimpact in ks_eimpact:
	mod = runner(EA,
                     plasma_on=True,
                     k_eimpact_A2=k_eimpact,
		     npts=200,
                     rxn2_barrier=True,
                     excite_type='vib',
                     Evib_A2=Evib_A2)

	with cd('mkm-calcs/{0}'.format(mod.prefix)):
	        mod.write_input(ncores=2)
	        mod.run_job()
 #+END_SRC

 #+RESULTS:
 :results:
 :end:


** Figure 2: Plasma-off \ce{NH3} yields

 #+BEGIN_SRC python :results output org drawer
from simplemkm import simpleMkm as mkm
import numpy as np
import matplotlib.pyplot as plt
from mkmutils import *

plt.style.use('seaborn-paper')
plt.rcParams["font.family"] = "Helvetica"

fig = plt.figure(figsize = (3.5, 3.25), dpi=200)

rates = []

EAmetal = [-1.2, -0.6, 0.0]


for EA in EAmetal:
    mod = mkmRunner(EA, plasma_on=False, rxn2_barrier=True)
    prefix = mod.prefix
    d = load_variables('mkm-calcs/{0}/{0}.mkmout'.format(prefix))

    allpressures = d['pressures']
    pABs = []
    
    for p in allpressures:
        # N2, H2, and NH3 pressures
        pA2, pB, pAB = p
        pABs.append(np.float(pAB))

    plt.plot(d['T'], pABs, '-',
             label='$E_{{\mathrm{{N}}}} = {0}$ eV'.format(EA))

Xeq = [float(x) for x in d['Xeq']]
pABeq = [float(x[-1]) for x in d['eq_pressures']]

plt.plot(d['T'], pABeq, c='k', ls='--', label='Eqb. limit')

plt.ylim(-0.001, 0.1)
plt.xlim(350, 1000)
plt.legend(frameon=False, fontsize=8)
plt.xlabel('Temperature (K)')
plt.ylabel('NH$_{3}$ pressure (atm)')

# Inset
ax2 = fig.add_axes([0.65, 0.4, 0.25, 0.25])

EAs = np.linspace(1., -1.5, 150)
T = 473.

theta = 0.0

X = 0.05

rates = []
for i, EA in enumerate(EAs):
    mod = mkm(T, EA, rxn2_barrier=True)

    kf, kr = mod.get_rate_constants()
    K2 = kf[1] / kr[1]
    pA2, pB, pAB = mod.get_pressures(X)

    theta = mod.integrate_odes(theta0=theta, X=X)[0]
        
    try:
	theta = mod.find_steady_state_roots(theta0=[theta], X=X)
    except:
        theta = mod.integrate_odes(theta0=theta, X=X)[0]
        try:
            theta = mod.find_steady_state_roots(theta0=[theta], X=X)
        except:
            pass
                         
    r = mod.get_rates(theta, mod.get_pressures(X))

    if r[0] > 0:
        ls = '-'
    else:
        ls = '--'

    rates.append(abs(r[0]))
ax2.plot(EAs,
         np.log10(rates),
         ls,
         label='$p_{{\mathrm{{AB}}}} = {0:1.3f}$ atm'.format(pAB), c='C7')

EAmetal = [-1.2, -0.6, 0.0]

for EA in EAmetal:
    mod = mkm(T, EA, rxn2_barrier=True)

    kf, kr = mod.get_rate_constants()
    K2 = kf[1] / kr[1]
    pA2, pB, pAB = mod.get_pressures(X)

    theta = mod.integrate_odes(theta0=theta, X=X)[0]
        
    try:
	theta = mod.find_steady_state_roots(theta0=[theta], X=X)
    except:
        theta = mod.integrate_odes(theta0=theta, X=X)[0]
        try:
            theta = mod.find_steady_state_roots(theta0=[theta], X=X)
        except:
            pass
                         
    r = mod.get_rates(theta, mod.get_pressures(X))

    if r[0] > 0:
        ls = '-'
    else:
        ls = '--'

    ax2.plot(EA, np.log10(abs(r[0])), 'o')

plt.ylim(-16, -4)
plt.xlim(-1.5, 0.5)

plt.yticks(np.arange(-15, 0, 5))

plt.xlabel('$E_{\mathrm{N}}$ (eV)')
plt.ylabel('log$_{10}$(TOF [s$^{-1}$])')

plt.tight_layout()

for ext in ['eps', 'pdf', 'png']:
    plt.savefig('figures/thermal-pNH3.{0}'.format(ext), dpi=200)
plt.show()
 #+END_SRC

 #+RESULTS:
 :results:
 :end:


** Figure 3: Plasma-on \ce{NH3} yields


